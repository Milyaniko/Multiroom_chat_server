<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>ChatCat - <%= roomName %></title>
	<link rel="stylesheet" href="../css/chatroomStyles.css">
	<script src="https://widget.cloudinary.com/global/all.js"></script>
	<script src="/socket.io/socket.io.js"></script>
</head>
<body>
	<div class="container">
		<div class="titlePanel">
			<h1>ChatCAT | <%= roomName %></h1>
		</div>
		<div class="controls">
			<div class="userPicHolder"><img src="<%= user.profilePic %>"></div>
			<p class="userName"><%= user.fullName %></p>
			<a href="/rooms" id="roomsBtn">Rooms</a>
			<a href="/logout" id="logOutBtn">Logout</a>
		</div>
		<div class="chatListDiv">
			<div class="chatMessagesPanel">
				<div class="chatMessages" id='chatMessages'>
				<!-- Loop this for chat messages -->
				<div class="chatBlock">
					<div class="userPic"><img src="<%= user.profilePic %>"></div>
					<div class="chatMsg"></div>
				</div>					
				<!-- loop end -->
				</div>
				<div class="typePanel">
					<input type="text" name="userInput" id="userInput" placeholder="Type here and press enter">
					<a href="#" id="uploadFile" class="fileUploadBtn">Photo</a>
				</div>
			</div>
			<div class="chatUsers">
			<!-- Loop this for chat users -->
				<div class="userBlock">
					<div class="userPic"><img src="<%= user.profilePic %>"></div>
					<div class="userName"><%= user.fullName %></div>
				</div>
			<!-- loop end -->
			</div>
		</div>
	</div>
	<script>
			const socket = io.connect('<%= host %>' + '/chat/:id', {
				transports: ['websocket']
			});
			const roomID = '<%= roomID %>';
			const userName = '<%= user.userName %>';
			const userAvatar = '<%= user.userAvatar %>'
			const chatUsersList = document.getElementById('chatUsers');
			const userInputField = document.getElementById('userInput');
			const uploadImageBtn = document.getElementById('uploadFile');
			const chatMessagesList = document.getElementById('chatMessages');
			socket.on('connect', () => {
				socket.emit('join', {
					roomID,
					userAvatar,	
					userName,
				});
			});
			const userInputPress = (event) => {
				let inputValue = event.target.value;
				event.preventDefault();;
				if (event.which === 13 && inputValue !== '') {
					const newMessage = {
						roomID,
						userName,
						userAvatar,
						message: inputValue,
					};
					socket.emit('newMessage', JSON.stringify(newMessage));
					updateMessagesList(userAvatar, inputValue);
					inputValue = '';
				}
			};
			const uploadImagePress = (event) => {
				cloudinary.openUploadWidget({
					cloud_name: 'dxl3f9z16',
					upload_preset: 'yfbmqf76',
				}, (error, result) => {
					if (!error) {
						let tmp = '';
						for(let img of result) {
							tmp += `<img src="${img.src}">`
						}
						updateMessagesList(userAvatar, tmp);
						const newMessage = {
							roomID,
							userName,
							userAvatar,
							message: tmp,
						};
						socket.emit('newMessage', newMessage);
					} else {
							console.log(error)
						}
				})
			};
			const renderUserItem = (user) => (
				`<div class="userBlock">
					<div class="userPic"><img src=${userAvatar} alt=${userName}"></div>
					<div class="userName">${userName}</div>
				</div>`
			);
			const updateMessagesList = (userAvatar, message) => {
				const div = document.createElement('div');
				div.className = "chatBlock";
				div.innerHTML = `<div class="userPic"><img src=${userAvatar} alt=${userName}"></div>
										<div class="chatMsg">${message}</div>`;
				chatMessagesList.appendChild(div);
			};
			userInputField.addEventListener('keyup', userInputPress);
			uploadImageBtn.addEventListener('click', uploadImagePress);
			socket.on('updateUserList', (data) => {
				let usersListData = '';
				const parsedData = JSON.parse(data);
				for(let user of parsedData) {
					usersListData += renderUserItem(user);
				}
				chatUsersList.innerHTML('');
				chatUsersList.innerHTML(usersListData);
			});
			socket.on('inMessage', (data) => {
				const parsedData = JSON.parse(data);
				const { userAvatar, message } = parsedData;
				updateMessagesList(userAvatar, parsedData);
			});
			socket.on('updateMessagesList', (messages) => {
				const parsedData = JSON.parse(messages);
				parsedData.filter(message => message.roomID === roomID)
				.map(item => updateMessagesList(item.userAvatar, item.message));
			})
		</script>
</body>
</html>